{"ast":null,"code":"var _jsxFileName = \"/Users/a91994/Desktop/Projects/RiskProfile/frontend/src/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n/* import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState(!!localStorage.getItem(\"token\"));\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const checkSession = async () => {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        setIsAuthenticated(false);\n        navigate(\"/\");\n      } else {\n        try {\n          const response = await fetch(\"http://127.0.0.1:5000/api/check-session\", {\n            method: \"GET\",\n            headers: { Authorization: `Bearer ${token}` },\n          });\n\n          if (!response.ok) {\n            localStorage.removeItem(\"token\");\n            setIsAuthenticated(false);\n            navigate(\"/\");\n          }\n        } catch (error) {\n          console.error(\"Session validation error:\", error);\n          localStorage.removeItem(\"token\");\n          setIsAuthenticated(false);\n          navigate(\"/\");\n        }\n      }\n    };\n\n    checkSession();\n  }, [navigate]);\n\n  return (\n    <AuthContext.Provider value={{ isAuthenticated, setIsAuthenticated }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => useContext(AuthContext);\n */\n\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { checkSession } from \"./authService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nconst EXCLUDED_ROUTES = [\"/\", \"/change_password\", \"/reset_password\"];\nconst userAccess = JSON.parse(localStorage.getItem(\"userAccess\")) || [];\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const location = useLocation();\n  const [isAuthenticated, setIsAuthenticated] = useState(null);\n  useEffect(() => {\n    const validateSession = async () => {\n      if (EXCLUDED_ROUTES.includes(location.pathname)) {\n        setIsAuthenticated(true); // Skip session check for excluded pages\n        return;\n      }\n      try {\n        const isValidSession = await checkSession();\n        setIsAuthenticated(isValidSession);\n      } catch (error) {\n        console.error(\"Session validation error:\", error);\n        setIsAuthenticated(false);\n      }\n    };\n    validateSession();\n  }, [location.pathname]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"jgKZ0XgNmarltppLbR9QSBPzdIs=\", false, function () {\n  return [useLocation];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useEffect","useState","useLocation","checkSession","jsxDEV","_jsxDEV","AuthContext","EXCLUDED_ROUTES","userAccess","JSON","parse","localStorage","getItem","AuthProvider","children","_s","location","isAuthenticated","setIsAuthenticated","validateSession","includes","pathname","isValidSession","error","console","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["/Users/a91994/Desktop/Projects/RiskProfile/frontend/src/AuthContext.js"],"sourcesContent":["/* import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState(!!localStorage.getItem(\"token\"));\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const checkSession = async () => {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        setIsAuthenticated(false);\n        navigate(\"/\");\n      } else {\n        try {\n          const response = await fetch(\"http://127.0.0.1:5000/api/check-session\", {\n            method: \"GET\",\n            headers: { Authorization: `Bearer ${token}` },\n          });\n\n          if (!response.ok) {\n            localStorage.removeItem(\"token\");\n            setIsAuthenticated(false);\n            navigate(\"/\");\n          }\n        } catch (error) {\n          console.error(\"Session validation error:\", error);\n          localStorage.removeItem(\"token\");\n          setIsAuthenticated(false);\n          navigate(\"/\");\n        }\n      }\n    };\n\n    checkSession();\n  }, [navigate]);\n\n  return (\n    <AuthContext.Provider value={{ isAuthenticated, setIsAuthenticated }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => useContext(AuthContext);\n */\n\n\n\n\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { checkSession } from \"./authService\";\n\n\nconst AuthContext = createContext();\n\nconst EXCLUDED_ROUTES = [\"/\", \"/change_password\", \"/reset_password\"];\nconst userAccess = JSON.parse(localStorage.getItem(\"userAccess\")) || [];\n\nexport const AuthProvider = ({ children }) => {\n  const location = useLocation();\n  const [isAuthenticated, setIsAuthenticated] = useState(null);\n\n  useEffect(() => {\n    const validateSession = async () => {\n      if (EXCLUDED_ROUTES.includes(location.pathname)) {\n        setIsAuthenticated(true); // Skip session check for excluded pages\n        return;\n      }\n\n\n      try {\n        const isValidSession = await checkSession();\n        setIsAuthenticated(isValidSession);\n      } catch (error) {\n        console.error(\"Session validation error:\", error);\n        setIsAuthenticated(false);\n      }\n    };\n\n    validateSession();\n  }, [location.pathname]);\n\n  return (\n    <AuthContext.Provider value={{ isAuthenticated }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => useContext(AuthContext);\n\n\n\n\n\n\n\n\n\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA,SAASA,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACtE,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,YAAY,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG7C,MAAMC,WAAW,gBAAGR,aAAa,CAAC,CAAC;AAEnC,MAAMS,eAAe,GAAG,CAAC,GAAG,EAAE,kBAAkB,EAAE,iBAAiB,CAAC;AACpE,MAAMC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,CAAC,IAAI,EAAE;AAEvE,OAAO,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAMC,QAAQ,GAAGd,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACe,eAAe,EAAEC,kBAAkB,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAE5DD,SAAS,CAAC,MAAM;IACd,MAAMmB,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAIZ,eAAe,CAACa,QAAQ,CAACJ,QAAQ,CAACK,QAAQ,CAAC,EAAE;QAC/CH,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC;QAC1B;MACF;MAGA,IAAI;QACF,MAAMI,cAAc,GAAG,MAAMnB,YAAY,CAAC,CAAC;QAC3Ce,kBAAkB,CAACI,cAAc,CAAC;MACpC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACjDL,kBAAkB,CAAC,KAAK,CAAC;MAC3B;IACF,CAAC;IAEDC,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,CAACH,QAAQ,CAACK,QAAQ,CAAC,CAAC;EAEvB,oBACEhB,OAAA,CAACC,WAAW,CAACmB,QAAQ;IAACC,KAAK,EAAE;MAAET;IAAgB,CAAE;IAAAH,QAAA,EAC9CA;EAAQ;IAAAa,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACf,EAAA,CA7BWF,YAAY;EAAA,QACNX,WAAW;AAAA;AAAA6B,EAAA,GADjBlB,YAAY;AA+BzB,OAAO,MAAMmB,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMlC,UAAU,CAACO,WAAW,CAAC;AAAA;AAAC2B,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}